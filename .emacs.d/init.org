# -*- mode: org -*-
#+TITLE: Emacs init.el File using Orgmode
#+AUTHOR: Pedro Bruel
#+EMAIL: pedro.bruel@gmail.com
#+STARTUP: indent logdrawer
#+LANGUAGE: en
#+TAGS: noexport(n)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport

* Packages
** Archives
- Getting latest MELPA packages, but not using stable versions since
  many packages won't appear.
- Getting latest org version:

#+begin_SRC emacs-lisp :tangle init.el
(package-initialize)
(require 'package)
(setq package-archives '(("org" . "https://orgmode.org/elpa/")
                         ("melpa" . "https://melpa.org/packages/")
                         ("gnu" . "https://elpa.gnu.org/packages/")))
#+end_SRC

* Function
** Saving Session & History
#+begin_SRC emacs-lisp :tangle init.el
(savehist-mode 1)
(desktop-save-mode 1)

(setq-default desktop-save t)
(setq-default desktop-auto-save-timeout 10)
#+end_SRC
** Encoding
#+begin_SRC emacs-lisp :tangle init.el
(setq-default buffer-file-coding-system 'utf-8-unix)
#+end_SRC
** Tabs as Spaces
#+begin_SRC emacs-lisp :tangle init.el
(setq-default indent-tabs-mode nil)
#+end_SRC
** File Position
Rememeber position in files, except unreadable ones:
#+begin_SRC emacs-lisp :tangle init.el
(save-place-mode 1)
(setq save-place-forget-unreadable-files nil)
#+end_SRC
** Update Changed Files
Emacs gets notified by changed files and updates buffers
automatically:
#+begin_SRC emacs-lisp :tangle init.el
(global-auto-revert-mode t)
#+end_SRC
** Backups
Create backup directory if none exists:
#+begin_SRC emacs-lisp :tangle init.el
(defvar --backup-directory (concat user-emacs-directory "backups"))
(if (not (file-exists-p --backup-directory)) (make-directory --backup-directory t))
(setq backup-directory-alist `(("." . ,--backup-directory)))
#+end_SRC

Configure backups:
#+begin_SRC emacs-lisp :tangle init.el
(setq make-backup-files t)
(setq auto-save-default t)
(setq auto-save-timeout 45)
#+end_SRC

Auto save based on keystrokes:
#+begin_SRC emacs-lisp :tangle init.el
(setq auto-save-interval 300)
#+end_SRC
** Custom Configuration File
Options chosen with the customize UI live here:
#+begin_src emacs-lisp :tangle init.el
(setq custom-file "~/.emacs.d/emacs-custom.el")
(load custom-file)
#+end_src
** Default Programs
#+begin_SRC emacs-lisp :tangle init.el
(setq browse-url-browser-function 'browse-url-generic)
(setq browse-url-generic-program "firefox")
#+end_SRC
** Paragraph Fill
#+begin_SRC emacs-lisp :tangle init.el
(setq-default fill-column 80)
#+end_SRC
** Hide/Show
Turns on hide/show minor mode for all programming modes.  Check commands [[https://www.emacswiki.org/emacs/HideShow][here]].
#+begin_SRC emacs-lisp :tangle init.el
(add-hook 'prog-mode-hook #'hs-minor-mode)
#+End_SRC
** Yes-or-no
#+begin_SRC emacs-lisp :tangle init.el
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_SRC
* Aesthetics
** Screen
*** Splashscreen
#+begin_SRC emacs-lisp :tangle init.el
(setq inhibit-splash-screen t)
#+end_SRC
** Color Theme
To use =base16= themes, install the =base16-theme= package and run:
#+begin_SRC emacs-lisp :tangle init.el
(require 'base16-theme)
(load-theme 'base16-default-dark t)
;;(load-theme 'base16-default-light t)
#+end_SRC
** Toolbar, Menubar, Scrollbar & Fringe
#+begin_SRC emacs-lisp :tangle init.el
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
(set-fringe-mode 0)
#+end_SRC
** Font
#+begin_SRC emacs-lisp :tangle init.el
(add-to-list 'default-frame-alist '(font . "Liberation Mono-13" ))
(set-face-attribute 'default t :font "Liberation Mono-13" )
#+end_SRC
** Cursor
For more configuration, such as color states, check Section [[Evil]].

Stop blinking:
#+begin_SRC emacs-lisp :tangle init.el
(blink-cursor-mode 0)
#+end_SRC
** Scrolling
Scroll one line at a time:
#+begin_SRC emacs-lisp :tangle init.el
(setq scroll-step 1)
(setq scroll-conservatively  10000)
(setq auto-window-vscroll nil)
#+end_SRC
** Whitespace
Remove trailing whitespace before saving:
#+begin_SRC emacs-lisp :tangle init.el
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_SRC
** Parenthesis
#+begin_SRC emacs-lisp :tangle init.el
(show-paren-mode 1)
#+end_SRC
** Line Numbering
Enable line numbering for all programming modes:
#+begin_SRC emacs-lisp :tangle init.el
(add-hook 'prog-mode-hook 'linum-mode)
#+end_SRC
** Powerline
Enable powerline:
#+begin_SRC emacs-lisp :tangle init.el
(require 'powerline)
(powerline-center-evil-theme)
#+end_SRC
* Package Configuration
** Evil                                                           :noexport:
#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'evil)
(evil-mode 1)
(setq evil-want-Y-yank-to-eol nil)
#+END_SRC

Set the cursor color based on evil state:

#+begin_SRC emacs-lisp :tangle init.el
(defvar my/base16-colors base16-default-dark-colors)
(setq evil-emacs-state-cursor   `(,(plist-get my/base16-colors :base0D) box))
(setq evil-insert-state-cursor  `(,(plist-get my/base16-colors :base0D) box))
(setq evil-motion-state-cursor  `(,(plist-get my/base16-colors :base0E) box))
(setq evil-normal-state-cursor  `(,(plist-get my/base16-colors :base0B) box))
(setq evil-replace-state-cursor `(,(plist-get my/base16-colors :base08) box))
(setq evil-visual-state-cursor  `(,(plist-get my/base16-colors :base09) box))
#+end_SRC
** Which-key
Check the [[https://github.com/justbur/emacs-which-key][documentation]] for further configuration.
#+begin_SRC emacs-lisp :tangle init.el
(require 'which-key)
(which-key-mode)
#+end_SRC
** Ein (Emacs IPython Notebook)
#+begin_SRC emacs-lisp :tangle init.el
(require 'ein)
#+end_SRC
*** Support for IJulia, ESS...
#+begin_SRC emacs-lisp :tangle init.el
(setq ein:polymode t)
#+end_SRC
** Org mode
Load package:
#+begin_src emacs-lisp :tangle init.el
(require 'org)
#+end_SRC

*** Inline Images
Always show inline images, re-show images after running code:
#+begin_SRC emacs-lisp :tangle init.el
(add-hook 'org-mode-hook 'org-display-inline-images)
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
(setq org-startup-with-inline-images t)
(setq org-image-actual-width nil)
#+end_SRC

*** Visual
Hide formatting marks (*,=,/,...):
#+begin_SRC emacs-lisp :tangle init.el
(setq org-hide-emphasis-markers t)
#+end_SRC

Show parsed "latex" symbols, such as "\ theta" (\theta):
#+begin_SRC emacs-lisp :tangle init.el
(setq org-pretty-entities t)
#+end_SRC

HTML exports use css:
#+begin_SRC emacs-lisp :tangle init.el
(setq org-html-htmlize-output-type (quote css))
#+end_SRC

Remove extra separator lines between subtrees:
#+begin_SRC emacs-lisp :tangle init.el
(setq org-cycle-separator-lines 0)
#+end_SRC
*** Agenda
Set agenda files directory:
#+begin_SRC emacs-lisp :tangle init.el
(setq org-agenda-files (list "~/org/agenda.org"))
#+end_SRC
*** Latex Exporting (ox-latex)
**** Custom Classes
#+begin_SRC emacs-lisp :tangle init.el
(require 'ox-latex)

;; Change for beamer
;;(setq org-latex-pdf-process (list "latexmk -xelatex %f"))
(setq org-latex-pdf-process (list "latexmk -pdflatex='pdflatex' -pdf -f %f"))
(setq org-latex-default-packages-alist nil)
(setq org-latex-packages-alist (quote (("" "booktabs" t))))

(setq org-latex-listings t)
(add-to-list 'org-latex-classes
             '("org-elsarticle"
               "\\documentclass{elsarticle}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
(add-to-list 'org-latex-classes
             '("org-ieeetran"
               "\\documentclass{IEEEtran}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src
**** TODO Async Exporting
This is currently not working correctly:
#+begin_SRC emacs-lisp :tangle init.el
(setq org-export-async-init-file "~/.emacs.d/init.el")
#+end_SRC
*** Markdown Exporting (ox-md)
#+begin_SRC emacs-lisp :tangle init.el
(require 'ox-md)
#+end_SRC
*** ODT Exporting (ox-odt)
#+begin_SRC emacs-lisp :tangle init.el
(require 'ox-odt)
#+end_SRC
*** Source Blocks and Templates (org-tempo)
#+begin_SRC emacs-lisp :tangle init.el
(setq org-edit-src-auto-save-idle-delay 5)
(setq org-edit-src-content-indentation 0)
(setq org-src-fontify-natively t)
(setq org-src-window-setup (quote other-frame))
(setq org-confirm-babel-evaluate nil)
#+end_SRC

**** Source Block Templates (org-tempo)

#+begin_src emacs-lisp :tangle init.el
(require 'org-tempo)

(add-to-list 'org-structure-template-alist
             '("I" . "SRC emacs-lisp :tangle init.el"))
(add-to-list 'org-structure-template-alist
             '("S" . "SRC shell :results output :session *Shell*"))
(add-to-list 'org-structure-template-alist
             '("j" . "SRC jupyter-julia :results output :session jl :async yes"))
(add-to-list 'org-structure-template-alist
             '("p" . "SRC jupyter-python :results output :session py :async yes"))
(add-to-list 'org-structure-template-alist
             '("r" . "SRC R :results output :session *R*"))
(add-to-list 'org-structure-template-alist
             '("g" . "SRC R :results graphics output :session *R* :file (org-babel-temp-file \"figure\" \".png\") :width 800 :height 720"))
#+end_src
*** Babel Languages (org-babel)
Loading the following babel languages:
#+begin_SRC emacs-lisp :tangle init.el
(require 'ob-julia)

(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (R . t)
   (julia . t)
   (python . t)
   (emacs-lisp . t)
   (shell . t)
   (ruby . t)
   (org . t)
   (makefile . t)
   (jupyter . t)
   ))
#+end_SRC
*** Expanding Linked Attachment Images (org-attach)
#+BEGIN_SRC emacs-lisp :tangle init.el
(require 'org-attach)
(setq org-link-abbrev-alist '(("att" . org-attach-expand-link)))
#+END_SRC
*** Adding the ignore tag
#+begin_SRC emacs-lisp :tangle init.el
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
#+end_SRC

** Ivy
Loading package:
#+begin_SRC emacs-lisp :tangle init.el
(require 'ivy)
(ivy-mode 1)
#+end_SRC

Defaults:
#+begin_SRC emacs-lisp :tangle init.el
(setq ivy-use-virtual-buffers t)
(setq ivy-count-format "(%d/%d) ")

(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-x") 'counsel-M-x)
(global-set-key (kbd "C-x C-f") 'counsel-find-file)
#+end_SRC
